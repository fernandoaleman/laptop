#!/bin/sh
# ft=shell

# shellcheck disable=SC3043

fancy_echo() {
  local fmt="$1"
  shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\\n" "$text" >>"$zshrc"
    else
      printf "\\n%s\\n" "$text" >>"$zshrc"
    fi
  fi
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

# shellcheck disable=SC2016
append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

arch="$(uname -m)"

if [ "$arch" = "arm64" ]; then
  HOMEBREW_PREFIX="/opt/homebrew"
else
  HOMEBREW_PREFIX="/usr/local"
fi

update_shell() {
  local shell_path
  shell_path="$(command -v zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells >/dev/null 2>&1; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

case "$SHELL" in
*/zsh)
  if [ "$(command -v zsh)" != "$HOMEBREW_PREFIX/bin/zsh" ]; then
    update_shell
  fi
  ;;
*)
  update_shell
  ;;
esac

if [ "$arch" = "arm64" ]; then
  if ! pkgutil --pkg-info=com.apple.pkg.RosettaUpdateAuto >/dev/null 2>&1; then
    fancy_echo 'Installing Rosetta ...'
    softwareupdate --install-rosetta --agree-to-license
  fi
fi

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
  /bin/bash -c \
    "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

  append_to_zshrc "eval \"\$($HOMEBREW_PREFIX/bin/brew shellenv)\""

  export PATH="$HOMEBREW_PREFIX/bin:$PATH"
fi

fancy_echo "Updating homebrew formulae ..."
brew update --force # https://github.com/Homebrew/brew/issues/1151
brew bundle --file=- <<EOF
tap "arl/arl"
tap "homebrew/cask-fonts"

# Fonts
cask "font-jetbrains-mono-nerd-font"

# Unix
brew "bash"
brew "curl"
brew "fd"
brew "fzf"
brew "git"
brew "gitmux"
brew "jq"
brew "lazygit"
brew "lf"
brew "ncdu"
brew "nmap"
brew "nvim"
brew "openssl"
brew "rcm"
brew "reattach-to-user-namespace"
brew "ripgrep"
brew "shellcheck"
brew "starship"
brew "tldr"
brew "tmux"
brew "tree"
brew "wget"
brew "zoxide"
brew "zsh"

# GitHub
brew "gh"

# Image manipulation
brew "imagemagick"

# PDF Rendering
cask "wkhtmltopdf"

# Programming language prerequisites and package managers
brew "coreutils"
brew "libyaml" # should come after openssl
brew "readline"
brew "yarn"
brew "zlib"

# Databases
brew "mysql-client@5.7", link: true
brew "libpq", link: true

# Chef
cask "chef-workstation"

# Mac apps
cask "1password"
cask "alacritty"
cask "appcleaner"
cask "docker"
cask "espanso"
cask "google-chrome"
cask "flycut"
cask "macx-youtube-downloader"
cask "rectangle"
cask "reflex"
cask "slack"
EOF

append_to_zshrc "eval \"\$(starship init zsh)\""
append_to_zshrc "eval \"\$(zoxide init zsh)\""

if [ ! -d "$HOME/.config/tmux/plugins" ]; then
  mkdir -p "$HOME/.config/tmux/plugins"
fi

if [ ! -d "$HOME/.config/tmux/plugins/tpm" ]; then
  git clone "https://github.com/tmux-plugins/tpm" "$HOME/.config/tmux/plugins/tpm"
fi

if [ ! -d "$HOME/.config/alacritty" ]; then
  mkdir "$HOME/.config/alacritty"
fi

if [ ! -d "$HOME/.config/alacritty/catppuccin" ]; then
  git clone "https://github.com/catppuccin/alacritty.git" "$HOME/.config/alacritty/catppuccin"
fi

if [ ! -d "$HOME/.config/espanso" ]; then
  mkdir "$HOME/.config/espanso"
fi

if [ ! -d "$HOME/Library/Application Support/espanso" ] && [ ! -L "$HOME/Library/Application Support/espanso" ]; then
  ln -s "$HOME/.config/espanso" "$HOME/Library/Application Support/espanso"
fi

if [ ! -d "$HOME/.asdf" ]; then
  fancy_echo "Installing asdf version manager ..."
  brew install asdf
  append_to_zshrc "source $(brew --prefix asdf)/libexec/asdf.zsh" 1
fi

alias install_asdf_plugin=add_or_update_asdf_plugin
add_or_update_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name" "$url"
  else
    asdf plugin-update "$name"
  fi
}

install_asdf_language() {
  local language="$1"
  local version
  version="$(asdf list-all "$language" | grep -v "[a-z]" | tail -1)"

  if ! asdf list "$language" | grep -Fq "$version"; then
    asdf install "$language" "$version"
    asdf global "$language" "$version"
  fi
}

gem_install_or_update() {
  if gem list "$1" --installed >/dev/null; then
    gem update "$@"
  else
    gem install "$@"
  fi
}

# shellcheck disable=SC1091
. "$(brew --prefix asdf)/libexec/asdf.sh"

fancy_echo "Installing latest Ruby ..."
add_or_update_asdf_plugin "ruby" "https://github.com/asdf-vm/asdf-ruby.git"
install_asdf_language "ruby"
gem update --system
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

fancy_echo "Installing latest Node ..."
add_or_update_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"
install_asdf_language "nodejs"

npm i changelog-maker -g

# Enable menu bar auto hide
defaults write NSGlobalDomain _HIHideMenuBar -bool true

# Enable dock auto hide
defaults write com.apple.dock autohide -bool true

# Disable dock delay
defaults write com.apple.dock autohide-delay -float 0
defaults write com.apple.dock autohide-time-modifier -int 0

# Hide recent apps from Dock
defaults write com.apple.dock show-recents -bool false

# Disable auto arrange spaces
defaults write com.apple.dock mru-spaces -bool false

# Disable auto-correct
defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false

# Disable auto-capitalization
defaults write NSGlobalDomain NSAutomaticCapitalizationEnabled -bool false

# Disable adding period after double space
defaults write NSGlobalDomain NSAutomaticPeriodSubstitutionEnabled -bool false

# Disable smart quotes
defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false

# Always expand open/save dialogs
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

# Always show scroll bars
defaults write -g AppleShowScrollBars -string "Always"

# Set sidebar icon size to large
defaults write -g NSTableViewDefaultSizeMode -int 3

# Don't show open dialog when launching document apps
# via https://mas.to/@timac@mastodon.social/109851379681544342
defaults write -g NSShowAppCentricOpenPanelInsteadOfUntitledFile -bool false

# "Delay until repeat" setting in System Settings > Keyboard
# 15 (225 ms) is normal minimum configurable via UI
# via https://gist.github.com/hofmannsven/ff21749b0e6afc50da458bebbd9989c5
# Also see https://github.com/ZaymonFC/mac-os-key-repeat
defaults write -g InitialKeyRepeat -int 15

# "Key repeat rate" setting in System Settings > Keyboard
# Note that this is the interval in between repeats, so the lower this value the faster the repeats will be fired
# 2 (30 ms) is normal minimum configurable via UI
# via https://gist.github.com/hofmannsven/ff21749b0e6afc50da458bebbd9989c5
# Also see https://github.com/ZaymonFC/mac-os-key-repeat
defaults write -g KeyRepeat -int 2

# Always show full file extension in Finder
defaults write NSGlobalDomain AppleShowAllExtensions -bool true

# Show path bar in Finder
defaults write com.apple.finder ShowPathbar -bool true

# Don't display warning when changing file extension in Finder
defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

# Set default location of new Finder windows to ~/Downloads
defaults write com.apple.finder NewWindowTarget -string "PfLo"
defaults write com.apple.finder NewWindowTargetPath -string "file://$HOME/Downloads"

# Set TextEdit default document format to plain text
defaults write com.apple.TextEdit RichText -bool false

# Set Activity Monitor update frequency to 2s
defaults write com.apple.ActivityMonitor UpdatePeriod -int 2

if [ -f "$HOME/.laptop.local" ]; then
  fancy_echo "Running your customizations from ~/.laptop.local ..."
  # shellcheck disable=SC1091
  . "$HOME/.laptop.local"
fi

# Restart processes
for app in "Dock" "Finder"; do
  killall "$app" >/dev/null 2>&1
done

fancy_echo "Laptop setup is complete!

Please restart your laptop for settings to take effect.
"
